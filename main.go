package main

import (
	"log"
	"os"
	"regexp"
	"strings"
	"time"
	"github.com/joho/godotenv"
	"gopkg.in/telebot.v4"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("[ERROR]: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ .env: %v", err)
	}

	// –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TOKEN")
	if token == "" {
		log.Fatal("[ERROR]: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
	log.Println("[INFO]: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞...")
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatalf("[ERROR]: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
		return
	}
	log.Println("[INFO]: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
	stopWordsEng := []string{"1:1", "my channel", "text me", "slot", "clone", "ebay", "buy here", "crypto", "gift", "stock", "binance", "visa", "casino", "bans", "btc", "bitcoin", "eth", "market", "ethereum", "profit", "onlyfans", "farting", "private", "horny", "sex", "porno", "girlfriend", "pussy", "anal", "telegram", "toncoin", "notcoin", "not", "ton", "bot"}
	stopWordsRus := []string{"—Å–ª–æ—Ç", "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "–∫—Ä–∏–ø—Ç", "–∂–µ–ª–∞—é—â–∏"/*—Ö/–µ*/, "—Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤"/*(–æ–±–ª–∞—Å—Ç–∏, —Å—Ñ–µ—Ä–µ)*/, "–Ω–∞–±–∏—Ä–∞–µ–º", "–¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç", "–∏–≥—Ä–∞—é —Ç—É—Ç", "—Ç–æ–ª—å–∫–æ —Ç—É—Ç", "–ø—Ä–æ–ø–ª–∞—á–µ–Ω", "—Ü—ã–ø–æ—á–∫–∏", "–∏–Ω—Ç–∏–º", "—Å–∫—Ä—ã—Ç—ã–µ —Ñ–æ—Ç–æ", "—Å–∫—Ä—ã—Ç—ã–º —Ñ–æ—Ç–æ", "–∫–∞–∑–∏–Ω–æ", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–Ω–∞—Ä–∫–æ", "–ø—Ä–∏–≤–∞—Ç"/*+–Ω—ã–π*/, "–ø–æ–¥—Ä—É–≥", "–ø–æ—Ä–Ω–æ", "—Å–µ–∫—Å", "—Ä–∞–∑–¥–µ"/*—Ç—å/–Ω–µ—à—å*/, "–ø–æ—à–ª–∞—è", "–≥–µ–π", "–∞–Ω–∞–ª—å"/*–Ω—ã–π/–Ω–∞—è*/, "—Ç—Ä–∞—Ö", "—à–ª—é—Ö", "–∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥–∏", "–æ–ø–ª–∞—Ç–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ", "–Ω—É–∂–¥–∞–µ"/*—Ç—Å—è*/, "–Ω—É–∂–¥–∞—é"/*—â–∏–º—Å—è*/, "–≤—ã–∏–≥—Ä—ã—à"/*—å/—ã*/}

	// –ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –≠–ú–û–î–ó–ò –ù–ï –£–ë–ò–†–ê–¢–¨ - –≠–¢–û –†–ê–ó–ù–´–ï –°–ò–ú–í–û–õ–´. –ï—Å–ª–∏ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ç–æ –Ω–µ—Ç, —ç—Ç–æ –æ–±–µ –≤–µ—Ä—Å–∏–∏ —ç–º–æ–¥–∑–∏ (—Å –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –∏ –±–µ–∑)
	// —á—Ç–æ —Ç–∞–∫–æ–µ –≤–∞—Ä–∏–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —á–µ–∫–∞–π –≤ readme
	allowedEmojis := []string{
		"üëç", "‚òùÔ∏è", "‚òù", "‚ùÑÔ∏è", "‚ùÑ", "ü§ù", "‚úèÔ∏è", "‚úè", "‚ù§Ô∏è", "‚ù§", "üí™", "üôè",
		"üëÄ", "üíº", "üí∏", "üî•", "‚ö°Ô∏è", "‚ö°", "‚úÖ", "üéÅ", "üí≥", "üîº", "üÜò", "üì≤",
		"üìå", "ü§∑", "‚ÄºÔ∏è", "‚Äº", "üÜí", "‚¨ÜÔ∏è", "‚¨Ü", "‚õîÔ∏è", "üëâ", "üëâüèª", "ü•π", "ü•∫",
		"üòé", "‚ò∫Ô∏è", "‚ò∫", "üòä", "üòã", "ü§î", "üí•", "üò≥", "ü§ó", "üòÑ", "üòÜ", "üòÇ", "ü§£",
	}
	
	// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏
	emojiRegex := regexp.MustCompile(`[\p{So}\p{Sk}]`)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		log.Printf("===============\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç %s: %s", c.Sender().Username, c.Message().Text)
		text := c.Message().Text
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ —Ä—É—Å—Å–∫–∏—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤
		// log.Println("–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤...")
		if containsStopWords(text, stopWordsEng) || containsStopWords(replaceSimilarChars(text), stopWordsRus) {
			// log.Printf("x –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", user.Username)
			return banUserAndDelete(bot, c, user)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
		// log.Println("–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏...")
		if containsDisallowedEmojis(text, allowedEmojis, emojiRegex) {
			// log.Printf("x –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –æ—Ç %s", user.Username)
			return banUserAndDelete(bot, c, user)
		}

		log.Println("[PASS]: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
		return nil
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤
	bot.Handle(telebot.OnVideoNote, func(c telebot.Context) error {
		log.Printf("[BAN]: –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç %s, –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", c.Sender().Username)
		return banUserAndDelete(bot, c, c.Sender())
	})

	// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	bot.Handle(telebot.OnUserJoined, func(c telebot.Context) error {
		log.Printf("[JOIN]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏...", c.Sender().Username)
		err := bot.Delete(c.Message())
		if err != nil {
			log.Printf("[ERROR]: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏: %v", err)
		}
		return err
	})

	// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω)
	bot.Handle(telebot.OnUserLeft, func(c telebot.Context) error {
		log.Printf("[LEAVE]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ...", c.Sender().Username)
		err := bot.Delete(c.Message())
		if err != nil {
			log.Printf("[ERROR]: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ: %v", err)
		}
		return err
	})

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
	bot.Start()
}

// –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func banUserAndDelete(bot *telebot.Bot, c telebot.Context, user *telebot.User) error {
	log.Printf("[BAN]: –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏ —É–¥–∞–ª–µ–Ω–∏–µ...", user.Username)
	chat := c.Chat()
	chatMember := &telebot.ChatMember{User: user}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	// log.Printf("[BAN]: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s...", user.Username)
	if err := bot.Delete(c.Message()); err != nil {
		log.Printf("[ERROR]: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.Username, err)
		return err
	}

	// –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := bot.Ban(chat, chatMember)
	if err != nil {
		log.Printf("[ERROR]: –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.Username, err)
	}
	return err
}

// –ó–∞–º–µ–Ω–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
func replaceSimilarChars(text string) string {
	// log.Println("–ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ...")
	replacements := map[string]string{
		"a": "–∞", "o": "–æ", "e": "–µ", "p": "—Ä", "c": "—Å", "x": "—Ö", "y": "—É", "m": "–º",
		"w": "—à", "t": "—Ç", "k": "–∫", "b": "–≤", "n": "–ø", "0": "–æ", "3": "–∑", "6": "–±", "u": "–∏",
		// –î–æ–±–∞–≤—å—Ç–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–º–µ–Ω—ã.
	}

	normalizedText := text
	for original, replacement := range replacements {
		normalizedText = strings.ReplaceAll(normalizedText, original, replacement)
	}
	return normalizedText
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
func containsStopWords(text string, stopWords []string) bool {
	for _, word := range stopWords {
		if strings.Contains(strings.ToLower(text), word) {
			log.Printf("[TRIGER]: –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ [%s]", word)
			return true
		}
	}
	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
func containsDisallowedEmojis(text string, allowedEmojis []string, emojiRegex *regexp.Regexp) bool {
	// log.Println("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏...")
	
	// –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
	allowedSet := make(map[string]struct{})
	for _, emoji := range allowedEmojis {
		allowedSet[emoji] = struct{}{}
	}

	// –ò—â–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
	emojis := emojiRegex.FindAllString(text, -1)
	log.Printf("[INFO]: –≠–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ: %v", emojis)

	for _, emoji := range emojis {
		// –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
		normalizedEmoji := strings.ReplaceAll(emoji, "\uFE0F", "")
		log.Printf("[INFO]: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏: %s (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: %s)", emoji, normalizedEmoji)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —ç–º–æ–¥–∑–∏
		if _, found := allowedSet[emoji]; !found {
			if _, found := allowedSet[normalizedEmoji]; !found {
				log.Printf("[TRIGER]: –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏: %s", emoji)
				return true
			}
		}
	}
	return false
}
